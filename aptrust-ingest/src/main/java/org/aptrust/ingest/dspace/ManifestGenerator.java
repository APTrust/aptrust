package org.aptrust.ingest.dspace;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import org.aptrust.common.exception.AptrustException;
import org.aptrust.common.metadata.APTrustMetadata;
import org.aptrust.ingest.api.DigitalObject;
import org.aptrust.ingest.api.DigitalObject.Type;
import org.aptrust.ingest.api.IngestManifest;
import org.aptrust.ingest.api.IngestManifest.Description;
import org.aptrust.ingest.api.IngestPackage;

public class ManifestGenerator {

    public static void main(String [] args) throws JAXBException, FileNotFoundException {
        if (args.length < 3) {
            System.err.println("Usage: " + ManifestGenerator.class.getSimpleName() + " [AIP dir] [manifest filename] [duracloudUsername] (accessConditions) (dpnBound)");
            System.exit(-1);
        }
        File packageDir = new File(args[0]);
        if (!packageDir.exists()) {
            System.err.println("Specified package directory \"" + packageDir.getAbsolutePath() + "\" does not exist!");
            System.exit(-1);
        }
        
        if (new File(args[1]).exists()) {
            System.out.println("The specified manifest file (" + args[1] + ") already exists and won't be overwritten!");
            System.exit(-1);
        }

        String username = args[2];
        String accessConditions = args.length > 3 ? args[3] : "restricted";
        boolean dpnBound = args.length > 4 ? Boolean.valueOf(args[4]).booleanValue() : false;

        IngestManifest m = new IngestManifest();
        List<IngestPackage> packages = new ArrayList<IngestPackage>();
        m.setPackagesToSubmit(packages);
        Description d = new Description();
        d.setName("A manifest automatically generated by the ManifestGenerator tool.");
        d.setSuppliedUsername(username);
        d.setIngestInitiated(new Date());
        m.setDescription(d);
        for (File f : packageDir.listFiles()) {
           if (f.getName().endsWith(".zip")) {
               try {
                    DSpaceAIPPackage p = new DSpaceAIPPackage(f);
                    IngestPackage pack = new IngestPackage();
                    pack.setDigitalObjects(Collections.singletonList(new DigitalObject(p.getId(), Type.DSPACE, p.getDspaceVersion(), f.length())));
                    APTrustMetadata metadata = new APTrustMetadata();
                    metadata.setId(p.getId());
                    metadata.setTitle(p.getTitle());
                    metadata.setAccessConditions(accessConditions);
                    metadata.setDPNBound(dpnBound);
                    pack.setMetadata(metadata);
                    packages.add(pack);
                    System.out.println("Added " + f.getName() + " (" + p.getId() + " \"" + p.getTitle() + "\") to the manifest.");
               } catch (AptrustException ex) {
                    System.out.println("Skipping " + f.getName() + " because an error was encountered while extracting metadata.");
                    ex.printStackTrace(System.out);
               }
           } else {
               System.out.println("Skipping " + f.getName() + " because it does not have the .zip extension.");
           }
        }
        
        JAXBContext jc = JAXBContext.newInstance(IngestManifest.class, IngestPackage.class, DigitalObject.class, APTrustMetadata.class);
        Marshaller marshaller = jc.createMarshaller();
        marshaller.setProperty("jaxb.formatted.output", Boolean.TRUE);
        marshaller.marshal(m, new FileOutputStream(args[1]));
        System.out.println("\nWrote manifest: " + new File(args[1]).getAbsolutePath());
    }
    
}
